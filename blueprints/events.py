from vkbottle.bot import *
from vkbottle import *
from vkbottle.api import *
from vkbottle.dispatch.rules import *

bp = Blueprint("events")
bp.labeler.vbml_ignore_case = True

beseda_logs = 2000000002

@bp.on.raw_event(GroupEventType.GROUP_JOIN, dataclass=GroupTypes.GroupJoin)
async def group_join_handler(event: GroupTypes.GroupJoin):
    try:
        user = (await bp.api.users.get(user_ids=event.object.user_id))[0]
        await bp.api.messages.send(
            peer_id=event.object.user_id,
            message=f"{user.first_name}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! <3",
            random_id=0
        )
    except:
    	pass
    try:
        await bp.api.messages.send(
            peer_id=beseda_logs,
            message=f"ü•∞ | @id{event.object.user_id}({user.first_name} {user.last_name}) –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É.",
            random_id=0
        )
    except VKAPIError[901]:
        pass

@bp.on.raw_event(GroupEventType.GROUP_LEAVE, dataclass=GroupTypes.GroupLeave)
async def group_leave_handler(event: GroupTypes.GroupLeave):
    try:
        user = (await bp.api.users.get(user_ids=event.object.user_id))[0]
        await bp.api.messages.send(
            peer_id=event.object.user_id,
            message=f"{user.first_name}, –ø–æ–∫–∞ –ø–æ–∫–∞, –Ω–∞–¥–µ—é—Å—å —Ç—ã –≤–µ—Ä–Ω—ë—à—å—Å—è –∫ –Ω–∞–º <3",
            random_id=0
        )
    except:
    	pass
    try:
        await bp.api.messages.send(
            peer_id=beseda_logs,
            message=f"üíî | @id{event.object.user_id}({user.first_name} {user.last_name}) –≤—ã—à–µ–ª –∏–∑ –≥—Ä—É–ø–ø—ã.",
            random_id=0
        )
    except VKAPIError[901]:
        pass

@bp.on.raw_event(GroupEventType.USER_BLOCK, dataclass=GroupTypes.UserBlock)
async def group_block_handler(event: GroupTypes.UserBlock):
    try:
        user = (await bp.api.users.get(user_ids=event.object.user_id))[0]
        admin = (await bp.api.users.get(user_ids=event.object.admin_id))[0]
        #timestamp = int(event.object.unblock_date())
        #unblockdate = datetime.datetime.fromtimestamp(timestamp)
        #unblockdt = unblockdate.strftime('%d.%m.%Y %H:%M:%S')
        await bp.api.messages.send(
            peer_id=beseda_logs,
            message=f"üö´ | @id{event.object.user_id}({user.first_name} {user.last_name}) –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @id{event.object.admin_id}({admin.first_name} {admin.last_name})\n–ü—Ä–∏—á–∏–Ω–∞: {event.object.comment}",
            random_id=0
        )
    except VKAPIError[901]:
        pass

@bp.on.raw_event(GroupEventType.USER_UNBLOCK, dataclass=GroupTypes.UserUnblock)
async def group_unblock_handler(event: GroupTypes.UserUnblock):
    try:
        user = (await bp.api.users.get(user_ids=event.object.user_id))[0]
        admin = (await bp.api.users.get(user_ids=event.object.admin_id))[0]
        await bp.api.messages.send(
            peer_id=beseda_logs,
            message=f"üôà | @id{event.object.user_id}({user.first_name} {user.last_name}) –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @id{event.object.admin_id}({admin.first_name} {admin.last_name})",
            random_id=0
        )
    except VKAPIError[901]:
        pass

@bp.on.raw_event(GroupEventType.MESSAGE_ALLOW, dataclass=GroupTypes.MessageAllow)
async def group_ma_handler(event: GroupTypes.MessageAllow):
    try:
        user = (await bp.api.users.get(user_ids=event.object.user_id))[0]
        await bp.api.messages.send(
            peer_id=beseda_logs,
            message=f"ü§™ | @id{event.object.user_id}({user.first_name} {user.last_name}) —Ä–∞–∑—Ä–µ—à–∏–ª –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è.",
            random_id=0
        )
    except VKAPIError[901]:
        pass

@bp.on.raw_event(GroupEventType.MESSAGE_DENY, dataclass=GroupTypes.MessageDeny)
async def group_md_handler(event: GroupTypes.MessageDeny):
    try:
        user = (await bp.api.users.get(user_ids=event.object.user_id))[0]
        await bp.api.messages.send(
            peer_id=beseda_logs,
            message=f"ü§î | @id{event.object.user_id}({user.first_name} {user.last_name}) –∑–∞–ø—Ä–µ—Ç–∏–ª –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è.",
            random_id=0
        )
    except VKAPIError[901]:
        pass