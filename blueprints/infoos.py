import time, platform, re
import os, sys
import traceback
import psutil, cpuinfo, uptime
import datetime
import math

from uptime import *
from io import *
from vkbottle.bot import Blueprint, Message

bp = Blueprint("InfoOS")
bp.labeler.vbml_ignore_case = True

#===============[–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞]==================
async def check(message, id: int) -> bool:
    items = (await bp.api.messages.get_conversations_by_id(peer_ids=message.peer_id)).items
    if not items:
        return False
    chat_settings = items[0].chat_settings
    admins = [417583878]
    return id in admins

#=========================[–∫–º–¥]=========================       
@bp.on.message(text='–∏–Ω—Ñ–∞ –æ —Å–∏—Å—Ç–µ–º–µ')
async def infoos(message: Message):
    if not await check(message, id=message.from_id):
        return "‚ö† –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!"
    try:
        osname = os.uname().sysname 
    except:
        pass
    try:
        osarch = os.uname().machine
    except:
        pass
    try:
        osrelease = os.uname().release
    except:
        pass
    try:
        ospython = platform.python_version()
    except:
        pass
    try:
        diskused = psutil.disk_usage("/.").used / (1024 ** 3)
        disku = round(diskused, 1)
    except:
        pass
    try:
        disktotal = psutil.disk_usage("/.").total / (1024 ** 3)
        diskb = round(disktotal, 1)
    except:
        pass
    try:
        diskper = psutil.disk_usage("/.").percent
    except:
        pass
    try:
        time = datetime.datetime.fromtimestamp(psutil.boot_time()).strftime("%d.%m.%Y %H:%M:%S")
    except:
        pass
    try:
        cpu = psutil.cpu_count(logical=True)
        loadcpu = psutil.cpu_percent(interval=1, percpu=True)
    except:
        pass
    try:
        useed_m = round(psutil.virtual_memory().used / 1024 ** 2)
        tot_m = round(psutil.virtual_memory().total / 1024 ** 2)
        used_m = round(useed_m, 2)
    except:
        pass
    try:
        inet_sent = psutil.net_io_counters().bytes_sent
        insent = int(inet_sent) / 100000 / 1024
        inet_recv = psutil.net_io_counters().bytes_recv
        inrecv = int(inet_recv) / 100000 / 1024 / 8
        inetsent = round(insent, 2)
        inetrecv = round(inrecv, 2)
    except:
        pass
    try:
        now = datetime.datetime.now()
        timeserv = now.strftime("%d.%m.%Y %H:%M:%S")
    except:
        pass
    try:
        upt = uptime() / 60 ** 2
        up = round(upt, 1)
    except:
        pass
    try:
        text = f'''
     ___________________________
     üñ•–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:
     ‚Ä¢ OC: {osname}
     ‚Ä¢ Arch: {osarch}
     ‚Ä¢ Release: {osrelease}
     ‚Ä¢ Python: {ospython}
     ___________________________
    ‚öô–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–µ–ª–µ–∑–µ:
     ‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {cpuinfo.get_cpu_info()["brand_raw"]}
     ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ CPU: {loadcpu}% [{cpu}]
     ‚Ä¢ –î–∏—Å–∫: {disku}–ì–ë / {diskb}–ì–ë [{diskper}%]
     ‚Ä¢ RAM: {useed_m}–ú–ë / {tot_m}–ú–ë
     ‚Ä¢ –ö–æ–ª-–≤–æ –æ—Ç–ø—Ä–∞–≤. –¥–∞–Ω–Ω—ã—Ö: {inetsent}–ì–ë
     ‚Ä¢ –ö–æ–ª-–≤o –ø—Ä–∏–Ω. –¥–∞–Ω–Ω—ã—Ö: {inetrecv}–ì–ë
     ‚Ä¢ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞:
     > {time}
     ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞:
     > {up} —á.
     ‚Ä¢ –í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:
     > {timeserv}
     ___________________________
     '''
        return(text)
    except:
        text = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n' + traceback.format_exc()
        return(text)

@bp.on.message(text='–∏–Ω—Ñ–∞ –æ —á–∞—Ç–µ')
async def commands(message: Message):
    if not await check(message, id=message.from_id):
        return "‚ö† –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!"
    if message.reply_message:
        await message.answer(
            f"Id —á–∞—Ç–∞: {message.peer_id}\nId –∏–∑ –æ—Ç–≤–µ—Ç–∞: {message.reply_message.from_id}\nId —Å–æ–æ–±—â–µ–Ω–∏—è: {message.conversation_message_id} –∏–ª–∏ {message.id}\nId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_id}"
        )
    else:
        await message.answer(
            f"Id —á–∞—Ç–∞: {message.peer_id}\nId —Å–æ–æ–±—â–µ–Ω–∏—è: {message.conversation_message_id} –∏–ª–∏ {message.id}\nId –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {message.from_id}"
        )